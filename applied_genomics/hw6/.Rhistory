tsne$Y
ggplot(as.data.frame(tsne))
ggplot(as.data.frame(tsne))+geom_point()
as.data.frame(tsne)
as.data.frame(tsne$Y)
ggplot(as.data.frame(tsne),aes(x=V1,y=V2))+geom_point()
ggplot(as.data.frame(tsne),aes(x='V1',y='V2'))+geom_point()
as.data.frame(tsne$Y)
ggplot(as.data.frame(tsne),aes(x=1,y=2))+geom_point()
ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point())
pca = prcomp(dat)
View(pca)
pca$rotation
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point())
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point())
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point())
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(100)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point())
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point())
set.seed(101)
pca = prcomp(dat)
pca$rotation
ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2)+geom_point())
ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point())
ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = tsne))
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = tsne))
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = 'tsne'))
set.seed(101)
pca = prcomp(t(dat))
ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()
library(plotly)
library(plotly)
set.seed(101)
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point())
install.packages('umap')
#UMAP
library(umap)
#pca
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T)
pca = prcomp(t(dat))
#pca
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point())
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
View(umap)
devtools::install_github("ropenscilabs/umapr")
utils::setInternet2(TRUE)
options(download.file.method = "internal")
devtools::install_github("ropenscilabs/umapr")
utils::setInternet2(TRUE)
options(download.file.method = "internal")
utils::setInternet2(TRUE)
options(download.file.method = "internal")
devtools::install_github("ropenscilabs/umapr")
install.packages('umapr')
library(devtools)
devtools::install_github("ropenscilabs/umapr")
devtools::install_github("ropenscilabs/umapr")
install.packages('umap')
install.packages("umap")
install.packages("umap")
install.packages("umap")
?umap
??umap
install.packages('umap')
install.packages("umap")
library(umap)
?umap
#UMAP
library(umap)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
plot(umap$layout)
View(umap)
umap$layout
#UMAP
library(umap)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2)+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
library(plotly)
#UMAP
library(umap)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2)+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
#UMAP
library(umap)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap')
#pca
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#UMAP
library(umap)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap')
#UMAP
library(umap)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
plotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
#UMAP
library(umap)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
devtools::install_github("ropenscilabs/umapr")
devtools::install_github("ropenscilabs/umapr")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("ropenscilabs/umapr")
library(devtools)
devtools::install_github("ropenscilabs/umapr")
remotes::install_git("ropenscilabs/umapr")
devtools::install_github("ropenscilabs/umapr")
#UMAP
library(umap)
library(plotly)
set.seed(100)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
#UMAP
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
#UMAP
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
time()
#UMAP
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
#UMAP
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
system.time()
#UMAP
ptm <- proc.time()
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
proc.time() - ptm
?proc.time
#UMAP
ptm <- proc.time()
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
proc.time()
proc.time() - ptm
#UMAP
ptm <- proc.time()
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
proc.time() - ptm
devtools::install_github("hadley/lineprof")
utils::setInternet2(TRUE)
options(download.file.method = "internal")
utils::setInternet2(TRUE)
options(download.file.method = "internal")
devtools::install_github("hadley/lineprof")
update.packages()
devtools::install_github("hadley/lineprof")
?poisson
#q1
a = c('Chromosome','Start','End')
b = read.xlsx('npjgenmed201627-s3.xlsx',sheet=4,startRow = 2)
#q1
library(openxlsx)
a = c('Chromosome','Start','End')
b = read.xlsx('npjgenmed201627-s3.xlsx',sheet=4,startRow = 2)
c = b[a]
write.table(c,'q1.bed',sep='\t',row.names = F,col.names = F,quote = F)
View(c)
c[3]
c[3]+1
c[:3]
c[,:3]
c[,1-3]
d = as.data.frame(c[1],c[2],c[3]+1)
d = cbind(c[1],c[2],c[3]+1)
View(d)
#q1
library(openxlsx)
a = c('Chromosome','Start','End')
b = read.xlsx('npjgenmed201627-s3.xlsx',sheet=4,startRow = 2)
c = b[a]
d = cbind(c[1],c[2],c[3]+1)
write.table(d,'q1.bed',sep='\t',row.names = F,col.names = F,quote = F)
View(d)
View(d)
View(b)
#q1
library(openxlsx)
a = c('Chromosome','Start','End')
b = read.xlsx('npjgenmed201627-s3.xlsx',sheet=4,startRow = 2)
c = b[a]
d = cbind(c[1],c[2]-1,c[3]+1)
write.table(d,'q1.bed',sep='\t',row.names = F,col.names = F,quote = F)
#q1
library(openxlsx)
a = c('Chromosome','Start','End')
b = read.xlsx('npjgenmed201627-s3.xlsx',sheet=4,startRow = 2)
c = b[a]
d = cbind(c[1],c[2],c[3]+1)
write.table(d,'q1.bed',sep='\t',row.names = F,col.names = F,quote = F)
#q1
library(openxlsx)
a = c('Chromosome','Start','End')
b = read.xlsx('npjgenmed201627-s3.xlsx',sheet=4,startRow = 2)
c = b[a]
d = cbind(c[1],c[2]-1,c[3])
write.table(d,'q1.bed',sep='\t',row.names = F,col.names = F,quote = F)
#q1
library(openxlsx)
a = c('Chromosome','Start','End')
b = read.xlsx('npjgenmed201627-s3.xlsx',sheet=4,startRow = 2)
c = b[a]
d = cbind(c[1],c[2],c[3]+1)
write.table(d,'q1.bed',sep='\t',row.names = F,col.names = F,quote = F)
pbinom(5,10,0.5)
?pbinom
pbinom(5,1,0.5)
pbinom(1,10,0.5)
pbinom(10,10,0.5)
pbinom(5,10,0.5)
pbinom(1:10,10,0.5)
?pnorm
?rbinom
rbinom(10,5,0.5)
chisq.test(c(241,303,100,93,274,46))
chisq.test(c(241,303,100,93,274,46))
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = 'tsne'))
#pca
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
install.packages('ggplot2',dependencies = T)
install.packages("ggplot2", dependencies = T)
#tsne
library(Rtsne)
library(ggplot2)
install.packages('colorspace')
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = 'tsne'))
setwd("C:/Users/lcqi/OneDrive/Desktop/Courses/applied_genomics/hw6")
chisq.test(c(241,303,100,93,274,46))
#pca
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#heatmap
?heatmap
head(dat)
#heatmap
heatmap(dat)
#heatmap
heatmap(t(dat))
#pca
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#heatmap
heatmap(t(dat))
#heatmap
heatmap(dat)
#pca
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#heatmap
heatmap(dat)
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = 'tsne'))
#time comparison
ptm <- proc.time()
tsne = Rtsne(dat)
proc.time() - ptm
ptm <- proc.time()
umap = umap(dat)
library(umap)
library(plotly)
set.seed(102)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
umap = umap(dat)
ggplotly(ggplot(as.data.frame(umap$layout),aes(x = V1,y=V2))+geom_point()+labs(x= 'umap 1', y = 'umap 2', title = 'umap'))
#time comparison
ptm <- proc.time()
tsne = Rtsne(dat)
proc.time() - ptm
ptm <- proc.time()
umap = umap(dat)
proc.time() - ptm
ptm <- proc.time()
pca = prcomp(t(dat))
proc.time() - ptm
ptm <- proc.time()
heatmap(dat)
proc.time() - ptm
#pca
library(plotly)
# set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#pca
library(plotly)
# set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#pca
library(plotly)
# set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#pca
library(plotly)
# set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
pca = prcomp(t(dat))
ggplotly(ggplot(as.data.frame(pca$rotation),aes(x=PC1,y=PC2))+geom_point()+labs(title = 'pca'))
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
# set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = 'tsne'))
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
# set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = 'tsne'))
#tsne
library(Rtsne)
library(ggplot2)
library(plotly)
set.seed(101)
dat = as.matrix(read.table('expression.txt',row.names = 1,header = T))
tsne = Rtsne(dat)
# plot(tsne$Y, asp =1 ,main="tSNE", xlab="tSNE dimension 1", ylab="tSNE dimension 2")
ggplotly(ggplot(as.data.frame(tsne$Y),aes(x=V1,y=V2))+geom_point()+labs(x= 'tsne 1', y = 'tsne 2', title = 'tsne'))
shiny::runApp('C:/Users/lcqi/OneDrive/Desktop/Shiny_clustering')
dat = matrix(c(3,1,1,3),2)
dat
fisher.test(dat)
?fisher.test
head(father)
data(fater.son)
data(father.son)
?t.test
