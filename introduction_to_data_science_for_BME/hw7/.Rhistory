ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = "287 genes identified by fisher's exact test")+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
#chi
chisq_names = unique(c(chisq_results[,1],chisq_results[,2]))
chisq_map = melt(setDT(
dat[rownames(dat) %in% chisq_names,],
keep.rownames = T),'rn')
ggplot( chisq_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes', title = "281 genes identified by chi-square test")+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
View(perm_map)
View(perm_map)
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
perm_names = unique(c(perm_results[,1],perm_results[,2]))
perm_map = melt(setDT(
dat[rownames(dat) %in% perm_names,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
perm_names = unique(c(perm_results[,1],perm_results[,2]))
perm_map = melt(setDT(
dat[rownames(dat) %in% perm_names,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
View(perm_results)
perm_results[,1]
perm_names = unique(c(perm_results[,1],perm_results[,2]))
perm_results[,1]
perm_results[,2]
unique(c(perm_results[,1],perm_results[,2]))
class(chisq_results[,1])
class(perm_results[,1])
perm_names = unique(c(as.character(perm_results[,1]),as.character(perm_results[,2])))
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
perm_names = unique(c(as.character(perm_results[,1]),as.character(perm_results[,2])))
perm_map = melt(setDT(
dat[rownames(dat) %in% perm_names,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
perm_names = unique(c(as.character(perm_results[,1]),as.character(perm_results[,2])))
perm_map = melt(setDT(
dat[rownames(dat) %in% perm_names,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
sort(perm_results$pval)
perm_results[,sort(perm_results$pval)]
perm_results[sort(perm_results$pval),]
perm_results[rank(perm_results$pval),]
perm_results[rank(as.numeric(perm_results$pval)),]
perm_results[order(as.numeric(perm_results$pval)),]
perm_results_test = perm_results[order(as.numeric(perm_results$pval)),]
View(perm_results_test)
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
perm_results_test = perm_results[order(as.numeric(perm_results$pval)),]
perm_names = unique(c(as.character(perm_results_test[,1]),as.character(perm_results_test[,2])))
perm_map = melt(setDT(
dat[rownames(dat) %in% perm_names,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
View(raw_dat)
View(dat)
dat[c(ABL1,ACVR1),]
dat[c('ABL1','ACVR1'),]
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
# perm_results_test = perm_results[order(as.numeric(perm_results$pval)),]
perm_names = unique(c(as.character(perm_results[,1]),as.character(perm_results[,2])))
perm_map = melt(setDT(
dat[rownames(dat) %in% perm_names,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
# perm_results_test = perm_results[order(as.numeric(perm_results$pval)),]
perm_names = unique(c(as.character(perm_results[,1]),as.character(perm_results[,2])))
perm_map = melt(setDT(
dat[rownames(dat) %in% perm_names,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
perm_results_test = spread(perm_results)
?spread
View(perm_results)
perm_results_test = spread(perm_results,gene1,gene2)
i = 1
each_line = perm_results[,i][1:2]
each_line
for( i in 1: length(perm_results[,1])){each_line = perm_results[i,][1:2]}
each_line
perm_results_test = c()
for( i in 1: length(perm_results[,1])){
each_line = perm_results[i,][1:2]
perm_results_test = c(each_line,perm_results_test)
}
View(perm_results_test)
class(each_line)
unlist(each_line)
length(unlist(each_line))
perm_results_test = c()
for( i in 1: length(perm_results[,1])){
each_line = perm_results[i,][1:2]
perm_results_test = c(unlist(each_line),perm_results_test)
}
perm_results_test = c()
for( i in 1: length(perm_results[,1])){
each_line = perm_results[i,][1:2]
perm_results_test = c(unlist(each_line),perm_results_test)
}
unlist(each_line)
View(each_line)
as.character(each_line)
each_line[1]
each_line[,1]
each_line[1]
each_line[1,1]
each_line[1,2]
as.character(each_line)
as.character(each_line[1,1])
perm_results_test = c()
for( i in 1: length(perm_results[,1])){
each_line = perm_results[i,][1:2]
perm_results_test = c(as.character(each_line[1,1]),as.character(each_line[1,2]),perm_results_test)
}
view(perm_results_test)
perm_map = dat[perm_results_test,]
View(perm_map)
perm_map = melt(setDT(
dat[perm_results_test,],
keep.rownames = T),'rn')
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
perm_results_test = c()
for( i in 1: length(perm_results[,1])){
each_line = perm_results[i,][1:2]
perm_results_test = c(as.character(each_line[1,1]),as.character(each_line[1,2]),perm_results_test)
}
# perm_map = dat[perm_results_test,]
# perm_names = unique(c(as.character(perm_results[,1]),as.character(perm_results[,2])))
perm_map = melt(setDT(
dat[perm_results_test,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = '49 genes identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
perm_results = read.csv("C:/Users/lcqi/OneDrive/Desktop/Courses/foundations_of_computational_biology_and_bioinformatics/project/github/BLCA/bigSummaryDfw_cutoff_BLCA.csv",header = 1,row.names = 1)
perm_results_test = c()
for( i in 1: length(perm_results[,1])){
each_line = perm_results[i,][1:2]
perm_results_test = c(as.character(each_line[1,1]),as.character(each_line[1,2]),perm_results_test)
}
# perm_map = dat[perm_results_test,]
# perm_names = unique(c(as.character(perm_results[,1]),as.character(perm_results[,2])))
perm_map = melt(setDT(
dat[perm_results_test,],
keep.rownames = T),'rn')
ggplot( perm_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = 'gene pairs identified by permutation test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
View(chisq_results)
#gene pairs heatmap
chisq_results = c()
for( i in 1: length(chisq_results[,1])){
each_line = chisq_results[i,][1:2]
chisq_results_names = c(as.character(each_line[1,1]),as.character(each_line[1,2]),chisq_results_names)
}
#gene pairs heatmap
chisq_results_names = c()
#gene pairs heatmap
chisq_results_names = c()
for( i in 1: length(chisq_results[,1])){
each_line = chisq_results[i,][1:2]
chisq_results_names = c(as.character(each_line[1,1]),as.character(each_line[1,2]),chisq_results_names)
}
chisq_map = melt(setDT(
dat[chisq_results_names,],
keep.rownames = T),'rn')
ggplot( chisq_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = 'gene pairs identified by chisq test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
#mutually co occurrence test
combinations = combn(1:length(dat[,1]),2)
fisher_results = c()
chisq_results = c()
for (i in 1:length(combinations[1,])){
id = combinations[,i]
ts = rawdat[id,]
if(fisher.test(ts)$p == 1){
fisher_results = rbind(fisher_results,c(row.names(ts),fisher.test(ts)$p))
}
if(chisq.test(ts,correct = FALSE)$p.value == 1){
chisq_results=rbind(chisq_results,c(row.names(ts),chisq.test(ts,correct = FALSE)$p.value))
}
}
# binomial_test_co_result = c()
# for(i in 1:length(combinations[1,])){
#   id = combinations[,i]
#   mtx = dat[id,]
#   ts = apply(mtx,2,function(r){
#     if(r[1]==r[2]&r[1]==1){return(1)}
#     else if(sum(r[1]+r[2])==1){return(0)}
#     })%>%unlist()
#   # # bootstrap
#   # ts = sample(ts,100,replace = T)
#   n1 = sum(ts)
#   n2 = length(ts)
#   if(pbinom(n1-1,n2,0.5,lower.tail = F)<1){binomial_test_co_result = rbind(binomial_test_co_result,c(rownames(mtx),pbinom(n1,n2,0.5,lower.tail = F)))}
# }
# chisq_test_co = function(mtx){
#   # expected = matrix(c(411,0,0,411),2,byrow = T)
#   TS = (mtx[1,1]-mtx[1,1])^2/mtx[1,1] + (mtx[1,2]-mtx[1,2])^2/(mtx[1,2]) +
#       (mtx[2,1]-mtx[1,1])^2/mtx[1,1] +(mtx[2,2]-mtx[1,2])^2/mtx[1,2]
#   return(pchisq(TS,1,lower.tail = FALSE))
# }
#
# chisq_test_co_results=c()
# for (i in 1:length(combinations[1,])){
#   id = combinations[,i]
#   ts = rawdat[id,]
#   # exclusive_results=c(exclusive_results,chisq_test_exclusive(ts))
#   if(chisq_test_co(ts)<0.05){
#     chisq_test_co_results=rbind(chisq_test_co_results,c(row.names(ts),chisq_test_co(ts)))
#   }
# # exclusive_results[as.numeric(exclusive_results[,3])>1e-100,]
# }
# #mutually exclusive test
# chisq_test_exclusive = function(mtx){
#   # expected = matrix(c(411,0,0,411),2,byrow = T)
#   TS = (mtx[1,1]-mtx[1,1])^2/mtx[1,1] + (mtx[1,2]-mtx[1,2])^2/(mtx[1,2]) +
#       (mtx[2,1]-(411-mtx[1,1]))^2/(411-mtx[1,1]) +(mtx[2,2]-mtx[1,1])^2/mtx[1,1]
#   return(pchisq(TS,1,lower.tail = FALSE))
# }
#
# exclusive_results=c()
# for (i in 1:length(combinations[1,])){
#   id = combinations[,i]
#   ts = rawdat[id,]
#   # exclusive_results=c(exclusive_results,chisq_test_exclusive(ts))
#   if(chisq_test_exclusive(ts)>0){
#     exclusive_results=rbind(exclusive_results,c(row.names(ts),chisq_test_exclusive(ts)))
#   }
# # exclusive_results[as.numeric(exclusive_results[,3])>1e-100,]
# }
View(chisq_results)
i = 1
each_line = chisq_results[i,][1:2]
each_line
c(as.character(each_line[1]),as.character(each_line[2]),chisq_results_names)
#gene pairs heatmap
chisq_results_names = c()
for( i in 1: length(chisq_results[,1])){
each_line = chisq_results[i,][1:2]
chisq_results_names = c(as.character(each_line[1]),as.character(each_line[2]),chisq_results_names)
}
chisq_map = melt(setDT(
dat[chisq_results_names,],
keep.rownames = T),'rn')
ggplot( chisq_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = 'gene pairs identified by chisq test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
fisher_results_names = c()
for( i in 1: length(fisher_results[,1])){
each_line = fisher_results[i,][1:2]
fisher_results_names = c(as.character(each_line[1]),as.character(each_line[2]),fisher_results_names)
}
fisher_map = melt(setDT(
dat[fisher_results_names,],
keep.rownames = T),'rn')
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = 'gene pairs identified by fisher test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
#gene pairs heatmap
chisq_results_names = c()
for( i in 1: length(chisq_results[,1])){
each_line = chisq_results[i,][1:2]
chisq_results_names = c(as.character(each_line[1]),as.character(each_line[2]),chisq_results_names)
}
chisq_map = melt(setDT(
dat[chisq_results_names,],
keep.rownames = T),'rn')
ggplot( chisq_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = 'gene pairs identified by chisq test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
fisher_results_names = c()
for( i in 1: length(fisher_results[,1])){
each_line = fisher_results[i,][1:2]
fisher_results_names = c(as.character(each_line[1]),as.character(each_line[2]),fisher_results_names)
}
fisher_map = melt(setDT(
dat[fisher_results_names,],
keep.rownames = T),'rn')
ggplot( fisher_map, aes(x = variable,y = factor(rn,levels = unique(rn))) )+
geom_tile(aes(fill = value))+
scale_fill_gradient(low="grey90", high="red") +
labs(x= 'Tumors',y = 'Genes',title = 'gene pairs identified by fisher test')+
theme(
# axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
# axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_blank()
)
10*mu - 2*w*x = 0
data(shhs)
setwd("C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME")
setwd("C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/hw7")
raw_dat = read.table('shhhs1.txt')
setwd("C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME")
raw_dat = read.table('shhhs1.txt')
setwd("C:/Users/lcqi/OneDrive/Desktop/Courses/introduction_to_data_science_for_BME/hw7")
raw_dat = read.table('shhs1.txt')
View(raw_dat)
raw_dat = read.table('shhs1.txt',header = 1)
View(raw_dat)
raw_dat$'log(rdi4p + 1)' = log(rdi4p + 1)
raw_dat$log = log(rdi4p + 1)
raw_dat = read.table('shhs1.txt',header = 1)
raw_dat$log = log(raw_dat$rdi4p + 1)
fit = lm()
fit = lm(log ~ waist + age + gender + bmi, data = raw_dat)
names(raw_dat)
fit = lm(log ~ waist + age_s1 + gender + bmi_s1, data = raw_dat)
summary(fit)
summary(fit)
data(diamonds)
diamonds = mutate(diamonds,cutPrice = (price>2400)*1)
View(diamonds)
a = c(1,2,3,4,5,6,7)
as.data.frame(a)
a = as.data.frame(a)
a
a = mutate(a, cuta = (a<4)*0 + (4<a<8)*1 + (9<a)*2)
a
a = mutate(a, cuta = (a>4)*0 + (4<a<8)*1 + (9<a)*2)
colnames(a) = price
colnames(a) = 'price'
a
a = mutate(a, cuta = (price>4)*0 + (4<price<8)*1 + (9<price)*2)
a = mutate(a, cuta = (price>4)*0 + (4 < price < 8)*1 + (9 < price)*2)
a = mutate(a, cuta = ((price > 4)*0 + (4 < price < 8)*1 + (9 < price)*2))
a = mutate(a, cuta = ((price > 4)*1 + (4 < price < 8)*2 + (9 < price)*3))
a = mutate(a, cuta = ((price > 4)*1)
c
a = mutate(a, cuta = (price > 4)*1)
a
a = mutate(a, cuta = ((price > 4)*1))
a = mutate(a, cuta = ((price > 4)*1)+ (price>5)*1)
a
a = mutate(a, cuta = ((price > 4)*1)+ (>9price>5)*1)
a = mutate(a, cuta = ((price > 4)*1)+ (9>price>5)*1)
a = mutate(a, cuta = ((price > 4)*1)+ (price>5)*1)
raw_dat = mutate(raw_dat, cutrdi4p = ((cutrdi4p<7)*1 + (7<=cutrdi4p)*1 + (15<=cutrdi4p)*1 + (30<=cutrdi4p)*1))
raw_dat = mutate(raw_dat, cutrdi4p = ((rdi4p<7)*1 + (7<=rdi4p)*1 + (15<=rdi4p)*1 + (30<=rdi4p)*1))
fit = glm(HTNDerv_s1 ~ cutrdi4p, data = raw_dat, family = binomial())
summary(fit)
raw_dat = mutate(raw_dat, cutrdi4p = ((rdi4p<7)*0 + (7<=rdi4p)*1 + (15<=rdi4p)*1 + (30<=rdi4p)*1))
fit = glm(HTNDerv_s1 ~ cutrdi4p, data = raw_dat, family = binomial())
summary(fit)
raw_dat = mutate(raw_dat, cutrdi4p = ((rdi4p<7)*1 + (7<=rdi4p)*1 + (15<=rdi4p)*1 + (30<=rdi4p)*1))
fit = glm(HTNDerv_s1 ~ cutrdi4p, data = raw_dat, family = binomial())
summary(fit)
names(raw_dat)
#age, gender, bmi, waist and smokstat_s1
fit = glm(HTNDerv_s1 ~ age_s1 + gender + bmi_s1 + waist+ cutrdi4p, data = raw_dat, family = binomial())
summary(fit)
